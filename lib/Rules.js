// Generated by CoffeeScript 1.10.0
(function() {
  var Rules, i;

  i = 0;

  global.t0 = Date.now();

  Rules = (function() {
    function Rules(nbConcurrent, rules) {
      var limiters, rule;
      this.nbConcurrent = nbConcurrent != null ? nbConcurrent : 0;
      this.Bottleneck = require("./Bottleneck");
      this.intervals = [];
      limiters = ((function() {
        var results;
        results = [];
        while (rule = rules.pop()) {
          results.push(this.makeLimiter(rule));
        }
        return results;
      }).call(this)).reverse();
      this.head = limiters.shift();
      limiters.reduce((function(_this) {
        return function(prev, limiter) {
          return prev.chain(limiter);
        };
      })(this), this.head);
    }

    Rules.prototype.makeLimiter = function(rule) {
      var limiter;
      limiter = (new this.Bottleneck(this.nbConcurrent)).changeReservoir(rule.nbCalls);
      this.intervals.push(setInterval(function() {
        return limiter.changeReservoir(rule.nbCalls);
      }, rule.per));
      return limiter;
    };

    Rules.prototype.submit = function() {
      return this.head.submit.apply({}, Array.prototype.slice.call(arguments, 0));
    };

    Rules.prototype.submitPriority = function() {
      return this.head.submitPriority.apply({}, Array.prototype.slice.call(arguments, 0));
    };

    Rules.prototype.stopAll = function() {};

    return Rules;

  })();

  module.exports = Rules;

}).call(this);
